#!/bin/bash

set -e

# List of adlist urls
adlistFile="/var/snap/pihole/common/etc/pihole/adlists.list"

IPV4_ADDRESS=""
IPV6_ADDRESS=""

# Find the rows and columns will default to 80x24 if it can not be detected
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo "${screen_size}" | awk '{print $1}')
columns=$(echo "${screen_size}" | awk '{print $2}')

# Divide by two so the dialogs take up half of the screen, which looks nice.
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# Unless the screen is tiny
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))

setColors() {
    COL_NC='\e[0m' # No Color
    COL_LIGHT_GREEN='\e[1;32m'
    COL_LIGHT_RED='\e[1;31m'
    TICK="[${COL_LIGHT_GREEN}✓${COL_NC}]"
    CROSS="[${COL_LIGHT_RED}✗${COL_NC}]"
    INFO="[i]"
    # shellcheck disable=SC2034
    DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
    OVER="\\r\\033[K"
}

welcomeDialogs() {
  whiptail --msgbox --backtitle "Welcome" --title "Pi-hole Snap Setup" "\\n\\nThis tool will help you setup your device into a network-wide ad blocker!" ${r} ${c}
  whiptail --msgbox --backtitle "Plea" --title "Free and open source" "\\n\\nThe Pi-hole is free, but powered by your donations:  http://pi-hole.net/donate" ${r} ${c}
  whiptail --msgbox --backtitle "Initiating network interface" --title "Static IP Needed" "\\n\\nThe Pi-hole is a SERVER so it needs a STATIC IP ADDRESS to function properly.

In the next section, you can choose to use your current network settings (DHCP) or to manually edit them." ${r} ${c}
}

chooseInterface() {
    # Turn the available interfaces into an array so it can be used with a whiptail dialog
    local interfacesArray=()
    # Number of available interfaces
    local interfaceCount
    # Whiptail variable storage
    local chooseInterfaceCmd
    # Temporary Whiptail options storage
    local chooseInterfaceOptions
    # Loop sentinel variable
    local firstLoop=1

    # Find out how many interfaces are available to choose from
    interfaceCount=$(echo "${availableInterfaces}" | wc -l)

    # If there is one interface,
    if [[ "${interfaceCount}" -eq 1 ]]; then
        # Set it as the interface to use since there is no other option
        PIHOLE_INTERFACE="${availableInterfaces}"
    # Otherwise,
    else
        # While reading through the available interfaces
        while read -r line; do
            # use a variable to set the option as OFF to begin with
            mode="OFF"
            # If it's the first loop,
            if [[ "${firstLoop}" -eq 1 ]]; then
                # set this as the interface to use (ON)
                firstLoop=0
                mode="ON"
            fi
            # Put all these interfaces into an array
            interfacesArray+=("${line}" "available" "${mode}")
        # Feed the available interfaces into this while loop
        done <<< "${availableInterfaces}"
        # The whiptail command that will be run, stored in a variable
        chooseInterfaceCmd=(whiptail --separate-output --radiolist "Choose An Interface (press space to select)" ${r} ${c} ${interfaceCount})
        # Now run the command using the interfaces saved into the array
        chooseInterfaceOptions=$("${chooseInterfaceCmd[@]}" "${interfacesArray[@]}" 2>&1 >/dev/tty) || \
        # If the user chooses Cancel, exit
        { echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; exit 1; }
        # For each interface
        for desiredInterface in ${chooseInterfaceOptions}; do
            # Set the one the user selected as the interface to use
            PIHOLE_INTERFACE=${desiredInterface}
            # and show this information to the user
            echo -e "  ${INFO} Using interface: $PIHOLE_INTERFACE"
        done
    fi
}

# A function to choose the upstream DNS provider(s)
setDNS() {
    # Local, named variables
    local DNSSettingsCorrect

    # In an array, list the available upstream providers
    DNSChooseOptions=(Google ""
        OpenDNS ""
        Level3 ""
        Norton ""
        Comodo ""
        DNSWatch ""
        Quad9 ""
        FamilyShield ""
        Cloudflare ""
        Custom "")
    # In a whiptail dialog, show the options
    DNSchoices=$(whiptail --separate-output --menu "Select Upstream DNS Provider. To use your own, select Custom." ${r} ${c} 7 \
    "${DNSChooseOptions[@]}" 2>&1 >/dev/tty) || \
    # exit if Cancel is selected
    { echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; exit 1; }

    # Display the selection
    echo -ne "  ${INFO} Using "
    # Depending on the user's choice, set the GLOBAl variables to the IP of the respective provider
    case ${DNSchoices} in
        Google)
            echo "Google DNS servers"
            PIHOLE_DNS_1="8.8.8.8"
            PIHOLE_DNS_2="8.8.4.4"
            ;;
        OpenDNS)
            echo "OpenDNS servers"
            PIHOLE_DNS_1="208.67.222.222"
            PIHOLE_DNS_2="208.67.220.220"
            ;;
        Level3)
            echo "Level3 servers"
            PIHOLE_DNS_1="4.2.2.1"
            PIHOLE_DNS_2="4.2.2.2"
            ;;
        Norton)
            echo "Norton ConnectSafe servers"
            PIHOLE_DNS_1="199.85.126.10"
            PIHOLE_DNS_2="199.85.127.10"
            ;;
        Comodo)
            echo "Comodo Secure servers"
            PIHOLE_DNS_1="8.26.56.26"
            PIHOLE_DNS_2="8.20.247.20"
            ;;
        DNSWatch)
            echo "DNS.WATCH servers"
            PIHOLE_DNS_1="84.200.69.80"
            PIHOLE_DNS_2="84.200.70.40"
            ;;
        Quad9)
            echo "Quad9 servers"
            PIHOLE_DNS_1="9.9.9.9"
            PIHOLE_DNS_2="149.112.112.112"
            ;;
        FamilyShield)
            echo "FamilyShield servers"
            PIHOLE_DNS_1="208.67.222.123"
            PIHOLE_DNS_2="208.67.220.123"
            ;;
        Cloudflare)
            echo "Cloudflare servers"
            PIHOLE_DNS_1="1.1.1.1"
            PIHOLE_DNS_2="1.0.0.1"
            ;;
        Custom)
            # Until the DNS settings are selected,
            until [[ "${DNSSettingsCorrect}" = True ]]; do
                #
                strInvalid="Invalid"
                # If the first
                if [[ ! "${PIHOLE_DNS_1}" ]]; then
                    # and second upstream servers do not exist
                    if [[ ! "${PIHOLE_DNS_2}" ]]; then
                        prePopulate=""
                    # Otherwise,
                    else
                        prePopulate=", ${PIHOLE_DNS_2}"
                    fi
                elif  [[ "${PIHOLE_DNS_1}" ]] && [[ ! "${PIHOLE_DNS_2}" ]]; then
                    prePopulate="${PIHOLE_DNS_1}"
                elif [[ "${PIHOLE_DNS_1}" ]] && [[ "${PIHOLE_DNS_2}" ]]; then
                    prePopulate="${PIHOLE_DNS_1}, ${PIHOLE_DNS_2}"
                fi

                # Dialog for the user to enter custom upstream servers
                piholeDNS=$(whiptail --backtitle "Specify Upstream DNS Provider(s)"  --inputbox "Enter your desired upstream DNS provider(s), separated by a comma.\\n\\nFor example '8.8.8.8, 8.8.4.4'" ${r} ${c} "${prePopulate}" 3>&1 1>&2 2>&3) || \
                { echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; exit 1; }
                #
                PIHOLE_DNS_1=$(echo "${piholeDNS}" | sed 's/[, \t]\+/,/g' | awk -F, '{print$1}')
                PIHOLE_DNS_2=$(echo "${piholeDNS}" | sed 's/[, \t]\+/,/g' | awk -F, '{print$2}')
                # If the IP is valid,
                if ! valid_ip "${PIHOLE_DNS_1}" || [[ ! "${PIHOLE_DNS_1}" ]]; then
                    # store it in the variable so we can use it
                    PIHOLE_DNS_1=${strInvalid}
                fi
                # Do the same for the secondary server
                if ! valid_ip "${PIHOLE_DNS_2}" && [[ "${PIHOLE_DNS_2}" ]]; then
                    PIHOLE_DNS_2=${strInvalid}
                fi
                # If either of the DNS servers are invalid,
                if [[ "${PIHOLE_DNS_1}" == "${strInvalid}" ]] || [[ "${PIHOLE_DNS_2}" == "${strInvalid}" ]]; then
                    # explain this to the user
                    whiptail --msgbox --backtitle "Invalid IP" --title "Invalid IP" "One or both entered IP addresses were invalid. Please try again.\\n\\n    DNS Server 1:   $PIHOLE_DNS_1\\n    DNS Server 2:   ${PIHOLE_DNS_2}" ${r} ${c}
                    # and set the variables back to nothing
                    if [[ "${PIHOLE_DNS_1}" == "${strInvalid}" ]]; then
                        PIHOLE_DNS_1=""
                    fi
                    if [[ "${PIHOLE_DNS_2}" == "${strInvalid}" ]]; then
                        PIHOLE_DNS_2=""
                    fi
                # Since the settings will not work, stay in the loop
                DNSSettingsCorrect=False
                # Otherwise,
                else
                    # Show the settings
                    if $(whiptail --backtitle "Specify Upstream DNS Provider(s)" --title "Upstream DNS Provider(s)" --yesno "Are these settings correct?\\n    DNS Server 1:   $PIHOLE_DNS_1\\n    DNS Server 2:   ${PIHOLE_DNS_2}" ${r} ${c}); then
                    # and break from the loop since the servers are valid
                    DNSSettingsCorrect=True
                    # Otherwise,
                    else
                        # If the settings are wrong, the loop continues
                        DNSSettingsCorrect=False
                    fi
                fi
            done
            ;;
    esac
}

# A function to display a list of example blocklists for users to select
chooseBlocklists() {
    # Back up any existing adlist file, on the off chance that it exists. Useful in case of a reconfigure.
    if [[ -f "${adlistFile}" ]]; then
        mv "${adlistFile}" "${adlistFile}.old"
    fi
    # Let user select (or not) blocklists via a checklist
    cmd=(whiptail --separate-output --checklist "Pi-hole relies on third party lists in order to block ads.\\n\\nYou can use the suggestions below, and/or add your own after installation\\n\\nTo deselect any list, use the arrow keys and spacebar" "${r}" "${c}" 7)
    # In an array, show the options available (all off by default):
    options=(StevenBlack "StevenBlack's Unified Hosts List" on
        MalwareDom "MalwareDomains" on
        Cameleon "Cameleon" on
        ZeusTracker "ZeusTracker" on
        DisconTrack "Disconnect.me Tracking" on
        DisconAd "Disconnect.me Ads" on
        HostsFile "Hosts-file.net Ads" on)

    # In a variable, show the choices available; exit if Cancel is selected
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty) || { echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; rm "${adlistFile}" ;exit 1; }
    # For each choice available,
    for choice in ${choices}
    do
        # Set the values to true
        case ${choice} in
            StevenBlack  )  echo "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts" >> "${adlistFile}";;
            MalwareDom   )  echo "https://mirror1.malwaredomains.com/files/justdomains" >> "${adlistFile}";;
            Cameleon     )  echo "http://sysctl.org/cameleon/hosts" >> "${adlistFile}";;
            ZeusTracker  )  echo "https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist" >> "${adlistFile}";;
            DisconTrack  )  echo "https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt" >> "${adlistFile}";;
            DisconAd     )  echo "https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt" >> "${adlistFile}";;
            HostsFile    )  echo "https://hosts-file.net/ad_servers.txt" >> "${adlistFile}";;
        esac
    done
}

getStaticIPv4Settings() {
    # Local, named variables
    local ipSettingsCorrect
    # Ask if the user wants to use DHCP settings as their static IP
    # This is useful for users that are using DHCP reservations; then we can just use the information gathered via our functions
    if whiptail --backtitle "Calibrating network interface" --title "Static IP Address" --yesno "Do you want to use your current network settings as a static address?
          IP address:    ${IPV4_ADDRESS}
          Gateway:       ${IPv4gw}" ${r} ${c}; then
        # If they choose yes, let the user know that the IP address will not be available via DHCP and may cause a conflict.
        whiptail --msgbox --backtitle "IP information" --title "FYI: IP Conflict" "It is possible your router could still try to assign this IP to a device, which would cause a conflict.  But in most cases the router is smart enough to not do that.
If you are worried, either manually set the address, or modify the DHCP reservation pool so it does not include the IP you want.
It is also possible to use a DHCP reservation, but if you are going to do that, you might as well set a static address." ${r} ${c}
    # Nothing else to do since the variables are already set above
    else
    # Otherwise, we need to ask the user to input their desired settings.
    # Start by getting the IPv4 address (pre-filling it with info gathered from DHCP)
    # Start a loop to let the user enter their information with the chance to go back and edit it if necessary
    until [[ "${ipSettingsCorrect}" = True ]]; do

        # Ask for the IPv4 address
        IPV4_ADDRESS=$(whiptail --backtitle "Calibrating network interface" --title "IPv4 address" --inputbox "Enter your desired IPv4 address" ${r} ${c} "${IPV4_ADDRESS}" 3>&1 1>&2 2>&3) || \
        # Cancelling IPv4 settings window
        { ipSettingsCorrect=False; echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; exit 1; }
        echo -e "  ${INFO} Your static IPv4 address: ${IPV4_ADDRESS}"

        # Ask for the gateway
        IPv4gw=$(whiptail --backtitle "Calibrating network interface" --title "IPv4 gateway (router)" --inputbox "Enter your desired IPv4 default gateway" ${r} ${c} "${IPv4gw}" 3>&1 1>&2 2>&3) || \
        # Cancelling gateway settings window
        { ipSettingsCorrect=False; echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; exit 1; }
        echo -e "  ${INFO} Your static IPv4 gateway: ${IPv4gw}"

        # Give the user a chance to review their settings before moving on
        if whiptail --backtitle "Calibrating network interface" --title "Static IP Address" --yesno "Are these settings correct?
            IP address: ${IPV4_ADDRESS}
            Gateway:    ${IPv4gw}" ${r} ${c}; then
                # After that's done, the loop ends and we move on
                ipSettingsCorrect=True
        else
            # If the settings are wrong, the loop continues
            ipSettingsCorrect=False
        fi
    done
    # End the if statement for DHCP vs. static
    fi
}


setStaticIPv4() {
    # Local, named variables
    local IFCFG_FILE
    local IPADDR
    local CIDR
    # For the Debian family, if dhcpcd.conf exists,
    if [[ "$SNAP_NAME"  == "pihole" ]]; then
        ip addr replace dev "${PIHOLE_INTERFACE}" "${IPV4_ADDRESS}"
            echo -e "  ${TICK} Set IP address to ${IPV4_ADDRESS%/*}
            You may need to restart after the install is complete"
    elif [[ -f "/etc/dhcpcd.conf" ]]; then
        # check if the IP is already in the file
        if grep -q "${IPV4_ADDRESS}" /etc/dhcpcd.conf; then
            echo -e "  ${INFO} Static IP already configured"
        # If it's not,
        else
            # set it using our function
            setDHCPCD
            # Then use the ip command to immediately set the new address
            ip addr replace dev "${PIHOLE_INTERFACE}" "${IPV4_ADDRESS}"
            # Also give a warning that the user may need to reboot their system
            echo -e "  ${TICK} Set IP address to ${IPV4_ADDRESS%/*}
            You may need to restart after the install is complete"
        fi
    # If it's not Debian, check if it's the Fedora family by checking for the file below
    elif [[ -f "/etc/sysconfig/network-scripts/ifcfg-${PIHOLE_INTERFACE}" ]];then
        # If it exists,
        IFCFG_FILE=/etc/sysconfig/network-scripts/ifcfg-${PIHOLE_INTERFACE}
        IPADDR=$(echo "${IPV4_ADDRESS}" | cut -f1 -d/)
        # check if the desired IP is already set
        if grep -Eq "${IPADDR}(\\b|\\/)" "${IFCFG_FILE}"; then
            echo -e "  ${INFO} Static IP already configured"
        # Otherwise,
        else
            # Put the IP in variables without the CIDR notation
            CIDR=$(echo "${IPV4_ADDRESS}" | cut -f2 -d/)
            # Backup existing interface configuration:
            cp "${IFCFG_FILE}" "${IFCFG_FILE}".pihole.orig
            # Build Interface configuration file using the GLOBAL variables we have
            {
            echo "# Configured via Pi-hole installer"
            echo "DEVICE=$PIHOLE_INTERFACE"
            echo "BOOTPROTO=none"
            echo "ONBOOT=yes"
            echo "IPADDR=$IPADDR"
            echo "PREFIX=$CIDR"
            echo "GATEWAY=$IPv4gw"
            echo "DNS1=$PIHOLE_DNS_1"
            echo "DNS2=$PIHOLE_DNS_2"
            echo "USERCTL=no"
            }> "${IFCFG_FILE}"
            # Use ip to immediately set the new address
            ip addr replace dev "${PIHOLE_INTERFACE}" "${IPV4_ADDRESS}"
            # If NetworkMangler command line interface exists and ready to mangle,
            if command -v nmcli &> /dev/null && nmcli general status &> /dev/null; then
                # Tell NetworkManagler to read our new sysconfig file
                nmcli con load "${IFCFG_FILE}" > /dev/null
            fi
            # Show a warning that the user may need to restart
            echo -e "  ${TICK} Set IP address to ${IPV4_ADDRESS%/*}
            You may need to restart after the install is complete"
        fi
    # If all that fails,
    else
        # show an error and exit
        echo -e "  ${INFO} Warning: Unable to locate configuration file to set static IPv4 address"
        exit 1
    fi
}

# A function to check if we should use IPv4 and/or IPv6 for blocking ads
use4andor6() {
    # Named local variables
    local useIPv4
    local useIPv6
    # Let use select IPv4 and/or IPv6 via a checklist
    cmd=(whiptail --separate-output --checklist "Select Protocols (press space to select)" ${r} ${c} 2)
    # In an array, show the options available:
    # IPv4 (on by default)
    options=(IPv4 "Block ads over IPv4" on
    # or IPv6 (on by default if available)
    IPv6 "Block ads over IPv6" on)
    # In a variable, show the choices available; exit if Cancel is selected
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty) || { echo -e "  ${COL_LIGHT_RED}Cancel was selected, exiting installer${COL_NC}"; exit 1; }
    # For each choice available,
    for choice in ${choices}
    do
        # Set the values to true
        case ${choice} in
        IPv4  )   useIPv4=true;;
        IPv6  )   useIPv6=true;;
        esac
    done
    # If IPv4 is to be used,
    if [[ "${useIPv4}" ]]; then
        # Run our function to get the information we need
        find_IPv4_information
        getStaticIPv4Settings
        setStaticIPv4
    fi
    # If IPv6 is to be used,
    if [[ "${useIPv6}" ]]; then
        # Run our function to get this information
        useIPv6dialog
    fi
    # Echo the information to the user
    echo -e "  ${INFO} IPv4 address: ${IPV4_ADDRESS}"
    echo -e "  ${INFO} IPv6 address: ${IPV6_ADDRESS}"
    # If neither protocol is selected,
    if [[ ! "${useIPv4}" ]] && [[ ! "${useIPv6}" ]]; then
        # Show an error in red
        echo -e "  ${COL_LIGHT_RED}Error: Neither IPv4 or IPv6 selected${COL_NC}"
        # and exit with an error
        exit 1
    fi
}

# We need to know the IPv4 information so we can effectively setup the DNS server
# Without this information, we won't know where to Pi-hole will be found
find_IPv4_information() {
    # Named, local variables
    local route
    # Find IP used to route to outside world by checking the the route to Google's public DNS server
    route=$(ip route get 8.8.8.8)
    # Use awk to strip out just the interface device as it is used in future commands
    IPv4dev=$(awk '{for (i=1; i<=NF; i++) if ($i~/dev/) print $(i+1)}' <<< "${route}")
    # Get just the IP address
    IPv4bare=$(awk '{print $7}' <<< "${route}")
    # Append the CIDR notation to the IP address
    IPV4_ADDRESS=$(ip -o -f inet addr show | grep "${IPv4bare}" |  awk '{print $4}' | awk 'END {print}')
    # Get the default gateway (the way to reach the Internet)
    IPv4gw=$(awk '{print $3}' <<< "${route}")
}

# Get available interfaces that are UP
get_available_interfaces() {
    # There may be more than one so it's all stored in a variable
    availableInterfaces=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1)
}

# Display welcome dialogs
welcomeDialogs
# Determine available interfaces
get_available_interfaces
# Find interfaces and let the user choose one
chooseInterface
# Decide what upstream DNS Servers to use
setDNS
# Give the user a choice of blocklists to include in their install. Or not.
chooseBlocklists
# Let the user decide if they want to block ads over IPv4 and/or IPv6
use4andor6
# Let the user decide if they want the web interface to be installed automatically
setAdminFlag
# Let the user decide if they want query logging enabled...
setLogging

